
### (grammar to be reworked, bogus AST)
class QueryStringParser
  prechigh
    nonassoc STRING_LITERAL 
    left     BI_AND BI_OR 
    left     SEPARATOR
    nonassoc WORD NOT_OP RANGE_OP 
    nonassoc SET TAG USER GROUP TYPE AUTHOR
    nonassoc SIZE DATE LENGTH WIDTH HEIGHT PAGES WORDS BITRATE RATING
  preclow

  start start
rule

start: query { result = val[0] }
;

query: 
    NOT_OP query            { result = Negation.new(val[1]) }
  | '(' query ')'           { result = val[1] }
  | keyval_expression       { result = val[0] }
  | sort_expression         { result = val[0] }
  | query BI_AND query      { result = BinaryAnd.new(val[0], val[2]) }
  | query BI_OR query       { result = BinaryOr.new(val[0], val[2]) }
  | STRING_LITERAL          { result = val[0] }
  | WORD                    { result = val[0] }
  | query query             { result = BinaryAnd.new(val[0], val[1]) }
  ;

string
  : STRING_LITERAL | WORD   { result = val[0] }
  ;

keyval_expression
  : discrete_key SEPARATOR discrete_values  { result = KeyValExpr.new(val[0], val[2]) }
  | range_key SEPARATOR range_values        { result = RangeKeyValExpr.new(val[0], val[2]) }
  ;

sort_expression
  : SORT SEPARATOR sort_values { result = val[2] }
  ;

discrete_key
  : SET    { result = val[0] }
  | DELETED { result = val[0] }
  | TAG    { result = val[0] }
  | USER   { result = val[0] }
  | GROUP  { result = val[0] }
  | TYPE   { result = val[0] }
  | AUTHOR { result = val[0] }
  | NAME   { result = val[0] }
  | SOURCE { result = val[0] }
  | REFERRER { result = val[0] }
  ;

range_key
  : SIZE    { result = val[0] }
  | DATE    { result = val[0] }
  | LENGTH  { result = val[0] }
  | WIDTH   { result = val[0] }
  | HEIGHT  { result = val[0] }
  | PAGES   { result = val[0] }
  | WORDS   { result = val[0] }
  | BITRATE { result = val[0] }
  | RATING  { result = val[0] }
  ;

# set:!((work & home) | (auction | !house))
# set:!work & home | (auction | !house)
discrete_values 
  : NOT_OP discrete_values                 { result = Negation.new(val[1]) }
  | '(' discrete_values ')'               { result = val[1] }
  | discrete_values BI_AND discrete_values { result = BinaryAnd.new(val[0], val[2]) }
  | discrete_values BI_OR discrete_values { result = BinaryOr.new(val[0], val[2]) }
  | string                                { result = val[0] }
  ;

sort_values
  : '(' sort_values ')' { result = val[1] }
  | sort_key sort_order { result = SortExpr.new(val[0], val[1]) }
  | sort_key            { result = SortExpr.new(val[0], 'asc') }
  ;

sort_key
  : NEW   { result = val[0] }
  | OLD   { result = val[0] }
  | DATE  { result = val[0] }
  | BIG   { result = val[0] }
  | SMALL { result = val[0] }
  | SIZE  { result = val[0] }
  | USER  { result = val[0] }
  | TYPE  { result = val[0] }
  | SOURCE { result = val[0] }
  | REFERRER { result = val[0] }
  | NAME  { result = val[0] }
  ;

sort_order
  : DESC { result = val[0] }
  | ASC  { result = val[0] }
  ;

# size:!((>4000 & <8000) | !> 2000)
# date:> 2006-10-12 & < 2007-01-01
range_values 
  : range_unary_expr     { result = val[0] }
  | '(' range_values ')' { result = val[1] }
  | range_basic_expr     { result = val[0] }
  | range_expr           { result = val[0] }
  ;

range_unary_expr:
   UN_OP range_values   { result = Unary.new(val[0], val[1]) }
;

range_basic_expr
  # implicit == ?
  #  string            { result = val[0] }
  : RANGE_OP string { result = Unary.new(val[0], val[1]) }
  | string
  ;

range_expr:
    range_values BI_AND range_values { result = BinaryAnd.new(val[0], val[2]) }
    range_values BI_OR range_values { result = BinaryOr.new(val[0], val[2]) }
;

---- inner stuff

Negation = Struct.new(:child)
Unary = Struct.new(:op, :child)
BinaryAnd = Struct.new(:left, :right)
BinaryOr = Struct.new(:left, :right)
KeyValExpr = Struct.new(:key, :values)
RangeKeyValExpr = Struct.new(:key, :values)
SortExpr = Struct.new(:key, :direction)

require 'strscan'
def parse(str)
  @yydebug = true if $DEBUG
  @lexer = Lexer.new(str)
  do_parse
end

def next_token
  @lexer.next_token
end

---- footer

class Lexer
  class StateDef < Struct.new(:tokens)
    def on(re, &block)
      self.tokens << [re, block]
    end
  end
  def self.def_state(name, &block)
    statedef = StateDef.new([])
    statedef.instance_eval(&block)
    tokens = statedef.tokens
    #puts "State: #{name}, tokens: #{tokens.map{|x,y| x}.join(", ")}"
    define_method("scan_#{name}") do
      break [false, "$end"] if @sscan.eos?
      #puts "scan_#{name}"
      r = tokens.each do |regexp, block|
        #puts "Scanning against #{regexp}"
        if match = @sscan.scan(regexp)
          if block
            if (ret = block.call(match))
              #puts "RETURNING #{ret.inspect}" if $DEBUG
              @state = ret.pop if ret[2]
              break ret
            else
              break next_token
            end
          else
            break [match, match]
          end
        end
      end
      r or raise "cannot lex at #{@sscan.rest}"
    end
  end

  def initialize(str)
    @state = :normal
    @sscan = StringScanner.new(str)
  end

  def next_token
    send("scan_#{@state}")
  end

# lexer def
  def_state(:normal) do
    on(/\s+/){ nil } # ignore
    on(/!|~/){|op| [:NOT_OP, op]}
    on(/(\(|\))/)
    on(/"[^"]+"/){|str| [:STRING_LITERAL, str[1..-2]] }
    on(/:/) { [:SEPARATOR, ':'] }
    on(/&|and\b/){ [:BI_AND, '&'] }
    on(/\||or\b/){ [:BI_OR, '|'] }
    %w[set deleted tag user group type author sort new old big small source referrer asc desc name  size date length width height pages words bitrate rating].each do |qualifier|
      on(/#{qualifier}\b/i){ [qualifier.upcase.to_sym, qualifier] }
    end
    on(/(<|>|<=|>=|=|==)/){|op| [:RANGE_OP, op] }
    on(/[^ \t|&~()]+/){|str| [:WORD, str.strip]}
  end
end


if __FILE__ == $0
  require 'pp'
  parser = QueryStringParser.new
  print "Enter expression (^D or q to quit): "
  until (line = gets.to_s.strip).empty? || line == "q"
    ast = parser.parse(line)
    pp ast
    print "Enter expression (^D or q to quit): "
  end
end
