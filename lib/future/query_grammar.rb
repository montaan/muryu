#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.4
# from racc grammer file "lib/future/query_grammar.racc".
#

require 'racc/parser'


class QueryStringParser < Racc::Parser

module_eval <<'..end lib/future/query_grammar.racc modeval..id939b447cc5', 'lib/future/query_grammar.racc', 93

Negation = Struct.new(:child)
Unary = Struct.new(:op, :child)
BinaryAnd = Struct.new(:left, :right)
BinaryOr = Struct.new(:left, :right)
KeyValExpr = Struct.new(:key, :values)

require 'strscan'
def parse(str)
  @yydebug = true if $DEBUG
  @lexer = Lexer.new(str)
  do_parse
end

def next_token
  @lexer.next_token
end

..end lib/future/query_grammar.racc modeval..id939b447cc5

##### racc 1.4.4 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 28, :_reduce_1,
 2, 29, :_reduce_2,
 3, 29, :_reduce_3,
 3, 29, :_reduce_4,
 3, 29, :_reduce_5,
 1, 29, :_reduce_6,
 1, 29, :_reduce_7,
 1, 29, :_reduce_8,
 1, 31, :_reduce_none,
 1, 31, :_reduce_10,
 3, 30, :_reduce_11,
 3, 30, :_reduce_12,
 1, 32, :_reduce_13,
 1, 32, :_reduce_14,
 1, 32, :_reduce_15,
 1, 32, :_reduce_16,
 1, 32, :_reduce_17,
 1, 32, :_reduce_18,
 1, 34, :_reduce_19,
 1, 34, :_reduce_20,
 1, 34, :_reduce_21,
 1, 34, :_reduce_22,
 1, 34, :_reduce_23,
 1, 34, :_reduce_24,
 1, 34, :_reduce_25,
 1, 34, :_reduce_26,
 1, 34, :_reduce_27,
 2, 33, :_reduce_28,
 3, 33, :_reduce_29,
 3, 33, :_reduce_30,
 3, 33, :_reduce_31,
 1, 33, :_reduce_32,
 1, 35, :_reduce_33,
 3, 35, :_reduce_34,
 1, 35, :_reduce_35,
 1, 35, :_reduce_36,
 2, 36, :_reduce_37,
 2, 37, :_reduce_38,
 1, 37, :_reduce_none,
 0, 39, :_reduce_40,
 7, 38, :_reduce_41 ]

racc_reduce_n = 42

racc_shift_n = 67

racc_action_table = [
    34,    36,    51,    39,    34,    36,    51,    39,    34,    36,
    51,    39,    34,    36,    28,    39,    34,    36,    51,    39,
    58,    32,    34,    36,    37,    32,    29,    30,    37,    32,
    54,    55,    37,    32,    54,    55,    37,    32,    34,    36,
    37,    39,    51,    65,    42,    34,    36,    48,    62,    29,
    30,    25,    43,    31,   nil,   nil,   nil,   nil,   nil,    32,
   nil,   nil,    37,     7,     9,    11,    47,   nil,   nil,    18,
    21,    23,     2,     3,     6,     8,    10,    12,    13,    15,
    17,    20,    22,     1,     5,    34,    36,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     7,     9,    11,   nil,   nil,    47,    18,    21,    23,
     2,     3,     6,     8,    10,    12,    13,    15,    17,    20,
    22,     1,     5,     7,     9,    11,   nil,   nil,   nil,    18,
    21,    23,     2,     3,     6,     8,    10,    12,    13,    15,
    17,    20,    22,     1,     5,     7,     9,    11,    34,    36,
    48,    18,    21,    23,     2,     3,     6,     8,    10,    12,
    13,    15,    17,    20,    22,     1,     5,   nil,   nil,    47,
    34,    36,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     7,     9,    11,   nil,
   nil,    47,    18,    21,    23,     2,     3,     6,     8,    10,
    12,    13,    15,    17,    20,    22,     1,     5,    34,    36,
    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47 ]

racc_action_check = [
    65,    65,    50,    65,    63,    63,    33,    63,    51,    51,
    52,    51,    25,    25,    14,    25,    32,    32,    59,    32,
    50,    65,    39,    39,    65,    63,    26,    26,    63,    51,
    56,    56,    51,    25,    46,    46,    25,    32,    37,    37,
    32,    37,    64,    64,    26,    55,    55,    55,    56,    16,
    16,     4,    28,    24,   nil,   nil,   nil,   nil,   nil,    37,
   nil,   nil,    37,     0,     0,     0,    55,   nil,   nil,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    54,    54,    54,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     5,     5,     5,   nil,   nil,    54,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,    29,    29,    29,   nil,   nil,   nil,    29,
    29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
    29,    29,    29,    29,    29,    30,    30,    30,    31,    31,
    31,    30,    30,    30,    30,    30,    30,    30,    30,    30,
    30,    30,    30,    30,    30,    30,    30,   nil,   nil,    31,
    48,    48,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    11,    11,    11,   nil,
   nil,    48,    11,    11,    11,    11,    11,    11,    11,    11,
    11,    11,    11,    11,    11,    11,    11,    11,    47,    47,
    47,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47 ]

racc_action_pointer = [
    61,   nil,   nil,   nil,    26,    99,   nil,   nil,   nil,   nil,
   nil,   184,   nil,   nil,    14,   nil,    43,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    28,    10,    20,   nil,    52,   121,
   143,   146,    14,     0,   nil,   nil,   nil,    36,   nil,    20,
   nil,   nil,   nil,   nil,   nil,   nil,    28,   206,   168,   nil,
    -4,     6,     4,   nil,    83,    43,    24,   nil,   nil,    12,
   nil,   nil,   nil,     2,    36,    -2,   nil ]

racc_action_default = [
   -42,   -27,   -16,   -17,   -42,   -42,   -18,    -6,   -19,    -8,
   -20,   -42,   -21,   -22,   -42,   -23,    -1,   -24,   -13,    -7,
   -25,   -14,   -26,   -15,   -42,   -42,   -42,    -2,   -42,   -42,
   -42,   -42,   -42,   -12,    -9,   -33,   -10,   -42,   -35,   -42,
   -36,   -39,    -3,    67,    -4,    -5,   -11,   -42,   -42,   -32,
   -42,   -42,   -37,   -38,   -42,   -42,   -42,   -28,   -34,   -40,
   -30,   -31,   -29,   -42,   -42,   -42,   -41 ]

racc_goto_table = [
    33,    49,    14,    16,    46,    63,   nil,    50,    26,    53,
   nil,   nil,    52,   nil,    27,   nil,   nil,    49,    49,   nil,
    56,    57,   nil,   nil,    49,    49,    59,    60,    61,   nil,
   nil,   nil,    44,    45,   nil,   nil,   nil,   nil,    64,   nil,
    66 ]

racc_goto_check = [
     8,     4,     1,     2,     6,    12,   nil,     8,     2,     4,
   nil,   nil,     8,   nil,     2,   nil,   nil,     4,     4,   nil,
     6,     6,   nil,   nil,     4,     4,     8,     6,     6,   nil,
   nil,   nil,     2,     2,   nil,   nil,   nil,   nil,     8,   nil,
     8 ]

racc_goto_pointer = [
   nil,     2,     3,   nil,   -30,   nil,   -27,   nil,   -25,   nil,
   nil,   nil,   -54 ]

racc_goto_default = [
   nil,   nil,   nil,    19,    41,    24,   nil,     4,   nil,    35,
    38,    40,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :STRING_LITERAL => 2,
 :WORD => 3,
 :NOT_OP => 4,
 :RANGE_OP => 5,
 :BI_AND => 6,
 :BI_OR => 7,
 :SET => 8,
 :TAG => 9,
 :USER => 10,
 :GROUP => 11,
 :TYPE => 12,
 :AUTHOR => 13,
 :SIZE => 14,
 :DATE => 15,
 :LENGTH => 16,
 :WIDTH => 17,
 :HEIGHT => 18,
 :PAGES => 19,
 :WORDS => 20,
 :BITRATE => 21,
 :RATING => 22,
 "(" => 23,
 ")" => 24,
 ":" => 25,
 :UN_OP => 26 }

racc_use_result_var = true

racc_nt_base = 27

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'STRING_LITERAL',
'WORD',
'NOT_OP',
'RANGE_OP',
'BI_AND',
'BI_OR',
'SET',
'TAG',
'USER',
'GROUP',
'TYPE',
'AUTHOR',
'SIZE',
'DATE',
'LENGTH',
'WIDTH',
'HEIGHT',
'PAGES',
'WORDS',
'BITRATE',
'RATING',
'"("',
'")"',
'":"',
'UN_OP',
'$start',
'start',
'query',
'keyval_expression',
'string',
'discrete_key',
'discrete_values',
'range_key',
'range_values',
'range_unary_expr',
'range_basic_expr',
'range_expr',
'@1']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 13
  def _reduce_1( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 17
  def _reduce_2( val, _values, result )
 result = Negation.new(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 18
  def _reduce_3( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 19
  def _reduce_4( val, _values, result )
 result = BinaryAnd.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 20
  def _reduce_5( val, _values, result )
 result = BinaryOr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 21
  def _reduce_6( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 22
  def _reduce_7( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 23
  def _reduce_8( val, _values, result )
 result = val[0]
   result
  end
.,.,

 # reduce 9 omitted

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 27
  def _reduce_10( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 31
  def _reduce_11( val, _values, result )
 result = KeyValExpr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 32
  def _reduce_12( val, _values, result )
 result = KeyValExpr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 36
  def _reduce_13( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 37
  def _reduce_14( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 38
  def _reduce_15( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 39
  def _reduce_16( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 40
  def _reduce_17( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 41
  def _reduce_18( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 45
  def _reduce_19( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 46
  def _reduce_20( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 47
  def _reduce_21( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 48
  def _reduce_22( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 49
  def _reduce_23( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 50
  def _reduce_24( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 51
  def _reduce_25( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 52
  def _reduce_26( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 53
  def _reduce_27( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 59
  def _reduce_28( val, _values, result )
 result = Negation.new(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 60
  def _reduce_29( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 61
  def _reduce_30( val, _values, result )
 result = BinaryAnd.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 62
  def _reduce_31( val, _values, result )
 result = BinaryOr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 63
  def _reduce_32( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 69
  def _reduce_33( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 70
  def _reduce_34( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 71
  def _reduce_35( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 72
  def _reduce_36( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 76
  def _reduce_37( val, _values, result )
 result = Unary.new(val[0], val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 82
  def _reduce_38( val, _values, result )
 result = Unary.new(val[0], val[1])
   result
  end
.,.,

 # reduce 39 omitted

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 87
  def _reduce_40( val, _values, result )
 result = BinaryAnd.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'lib/future/query_grammar.racc', 88
  def _reduce_41( val, _values, result )
 result = BinaryOr.new(val[0], val[2])
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class QueryStringParser


class Lexer
  class StateDef < Struct.new(:tokens)
    def on(re, &block)
      self.tokens << [re, block]
    end
  end
  def self.def_state(name, &block)
    statedef = StateDef.new([])
    statedef.instance_eval(&block)
    tokens = statedef.tokens
    #puts "State: #{name}, tokens: #{tokens.map{|x,y| x}.join(", ")}"
    define_method("scan_#{name}") do
      break [false, "$end"] if @sscan.eos?
      #puts "scan_#{name}"
      r = tokens.each do |regexp, block|
        #puts "Scanning against #{regexp}"
        if match = @sscan.scan(regexp)
          if block
            if (ret = block.call(match))
              #puts "RETURNING #{ret.inspect}" if $DEBUG
              @state = ret.pop if ret[2]
              break ret
            else
              break next_token
            end
          else
            break [match, match]
          end
        end
      end
      r or raise "cannot lex at #{@sscan.rest}"
    end
  end

  def initialize(str)
    @state = :normal
    @sscan = StringScanner.new(str)
  end

  def next_token
    send("scan_#{@state}")
  end

# lexer def
  def_state(:normal) do
    on(/!|~/){|op| [:NOT_OP, op]}
    on(/\(|\)/)
    on(/"[^"]+"/){|str| [:STRING_LITERAL, str[1..-2]] }
    on(/&|and\b/){ [:BI_AND, '&'] }
    on(/\||or\b/){ [:BI_OR, '|'] }
    %w[set tag user group type author size date length width height pages words bitrate rating].each do |qualifier|
      on(/#{qualifier}\b/){ [qualifier.upcase.to_sym, qualifier] }
    end
    on(/:/)
    on(/<|>|<=|>=|=|==/){|op| [:RANGE_OP, op] }
    on(/[^ \t|&~()]+/){|str| [:WORD, str.chomp]}
    on(/\s+/){ nil } # ignore
  end
end


if __FILE__ == $0
  require 'pp'
  parser = QueryStringParser.new
  print "Enter expression (^D or q to quit): "
  until (line = gets.to_s.strip).empty? || line == "q"
    ast = parser.parse(line)
    pp ast
    print "Enter expression (^D or q to quit): "
  end
end
