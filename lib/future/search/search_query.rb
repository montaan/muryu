#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "search_query.racc".
#

require 'racc/parser'


class SearchQuery < Racc::Parser

module_eval <<'..end search_query.racc modeval..id6f9b0dfeb0', 'search_query.racc', 90

Unary = Struct.new(:op, :child)
Binary = Struct.new(:op, :left, :right)
KeyValExpr = Struct.new(:key, :values)

require 'strscan'
def parse(str)
  @yydebug = true if $DEBUG
  @lexer = Lexer.new(str)
  do_parse
end

def next_token
  @lexer.next_token
end

..end search_query.racc modeval..id6f9b0dfeb0

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 26, :_reduce_1,
 2, 27, :_reduce_2,
 3, 27, :_reduce_3,
 3, 27, :_reduce_4,
 1, 27, :_reduce_5,
 1, 27, :_reduce_6,
 1, 27, :_reduce_7,
 1, 29, :_reduce_none,
 1, 29, :_reduce_9,
 3, 28, :_reduce_10,
 3, 28, :_reduce_11,
 1, 30, :_reduce_12,
 1, 30, :_reduce_13,
 1, 30, :_reduce_14,
 1, 30, :_reduce_15,
 1, 30, :_reduce_16,
 1, 30, :_reduce_17,
 1, 32, :_reduce_18,
 1, 32, :_reduce_19,
 1, 32, :_reduce_20,
 1, 32, :_reduce_21,
 1, 32, :_reduce_22,
 1, 32, :_reduce_23,
 1, 32, :_reduce_24,
 1, 32, :_reduce_25,
 1, 32, :_reduce_26,
 2, 31, :_reduce_27,
 3, 31, :_reduce_28,
 3, 31, :_reduce_29,
 1, 31, :_reduce_30,
 1, 33, :_reduce_31,
 3, 33, :_reduce_32,
 1, 33, :_reduce_33,
 1, 33, :_reduce_34,
 2, 34, :_reduce_35,
 2, 35, :_reduce_36,
 1, 35, :_reduce_none,
 3, 36, :_reduce_38 ]

racc_reduce_n = 39

racc_shift_n = 59

racc_action_table = [
     5,     7,     9,    35,    36,    16,    18,    21,    23,     1,
     3,     4,     6,     8,    11,    13,    15,    17,    20,    22,
     2,     5,     7,     9,    29,    52,    16,    18,    21,    23,
     1,     3,     4,     6,     8,    11,    13,    15,    17,    20,
    22,     2,     5,     7,     9,    30,    50,    16,    18,    21,
    23,     1,     3,     4,     6,     8,    11,    13,    15,    17,
    20,    22,     2,    35,    36,    45,    46,    35,    36,    37,
    35,    36,    45,    46,    35,    36,    45,    46,    35,    36,
    37,    28,    28,    40,    35,    36,    37,    34,    32,    27,
    40,   nil,   nil,   nil,    40,   nil,   nil,   nil,    34,    31,
     5,     7,     9,   nil,    34,    16,    18,    21,    23,     1,
     3,     4,     6,     8,    11,    13,    15,    17,    20,    22,
     2,    35,    36,    37,    35,    36,    45,    46,    52,    50,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    34,   nil,   nil,    40,    57,    55 ]

racc_action_check = [
     0,     0,     0,    46,    46,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     2,     2,     2,    19,    41,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     9,     9,     9,    24,    39,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,    52,    52,    52,    52,    50,    50,    50,
    45,    45,    45,    45,    40,    40,    40,    40,    37,    37,
    37,    12,    25,    52,    34,    34,    34,    50,    27,    10,
    45,   nil,   nil,   nil,    40,   nil,   nil,   nil,    37,    25,
    28,    28,    28,   nil,    34,    28,    28,    28,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,    29,    29,    29,    30,    30,    30,    30,    51,    48,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    29,   nil,   nil,    30,    51,    48 ]

racc_action_pointer = [
    -2,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,    40,
    89,   nil,    75,   nil,   nil,   nil,   nil,   nil,   nil,     0,
   nil,   nil,   nil,   nil,    21,    76,   nil,    88,    98,   119,
   122,   nil,   nil,   nil,    82,   nil,   nil,    76,   nil,    40,
    72,    19,   nil,   nil,   nil,    68,     1,   nil,   123,   nil,
    65,   122,    61,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -39,   -16,   -39,   -17,   -18,    -5,   -19,    -7,   -20,   -39,
   -39,   -21,    -1,   -22,    -6,   -23,   -12,   -24,   -13,   -39,
   -25,   -14,   -26,   -15,   -39,   -39,    -2,   -39,   -39,   -39,
   -39,    -3,    59,    -4,   -39,    -8,    -9,   -39,   -30,   -10,
   -39,   -11,   -31,   -33,   -34,   -39,   -39,   -37,   -39,   -27,
   -39,   -39,   -39,   -35,   -36,   -28,   -29,   -32,   -38 ]

racc_goto_table = [
    12,    41,    25,    47,    10,   nil,   nil,   nil,   nil,    26,
   nil,    51,    39,    47,   nil,   nil,    53,    48,    47,    54,
    49,   nil,   nil,    58,   nil,    47,   nil,   nil,    33,   nil,
   nil,   nil,   nil,    56 ]

racc_goto_check = [
     2,     8,     2,     4,     1,   nil,   nil,   nil,   nil,     2,
   nil,     8,     6,     4,   nil,   nil,     8,     6,     4,     4,
     6,   nil,   nil,     8,   nil,     4,   nil,   nil,     2,   nil,
   nil,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,     4,     0,   nil,   -27,   nil,   -17,   nil,   -29,   nil,
   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,    14,    38,    19,   nil,    24,   nil,    42,
    43,    44 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :STRING_LITERAL => 2,
 :WORD => 3,
 :UN_OP => 4,
 :RANGE_OP => 5,
 :BI_OP => 6,
 :SET => 7,
 :TAG => 8,
 :USER => 9,
 :GROUP => 10,
 :TYPE => 11,
 :AUTHOR => 12,
 :SIZE => 13,
 :DATE => 14,
 :LENGTH => 15,
 :WIDTH => 16,
 :HEIGHT => 17,
 :PAGES => 18,
 :WORDS => 19,
 :BITRATE => 20,
 :RATING => 21,
 "(" => 22,
 ")" => 23,
 ":" => 24 }

racc_use_result_var = true

racc_nt_base = 25

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'STRING_LITERAL',
'WORD',
'UN_OP',
'RANGE_OP',
'BI_OP',
'SET',
'TAG',
'USER',
'GROUP',
'TYPE',
'AUTHOR',
'SIZE',
'DATE',
'LENGTH',
'WIDTH',
'HEIGHT',
'PAGES',
'WORDS',
'BITRATE',
'RATING',
'"("',
'")"',
'":"',
'$start',
'start',
'query',
'keyval_expression',
'string',
'discrete_key',
'discrete_values',
'range_key',
'range_values',
'range_unary_expr',
'range_basic_expr',
'range_expr']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'search_query.racc', 13
  def _reduce_1( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 17
  def _reduce_2( val, _values, result )
 result = Unary.new(val[0], val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 18
  def _reduce_3( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 19
  def _reduce_4( val, _values, result )
 result = Binary.new(val[1], val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 20
  def _reduce_5( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 21
  def _reduce_6( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 22
  def _reduce_7( val, _values, result )
 result = val[0]
   result
  end
.,.,

 # reduce 8 omitted

module_eval <<'.,.,', 'search_query.racc', 26
  def _reduce_9( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 30
  def _reduce_10( val, _values, result )
 result = KeyValExpr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 31
  def _reduce_11( val, _values, result )
 result = KeyValExpr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 35
  def _reduce_12( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 36
  def _reduce_13( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 37
  def _reduce_14( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 38
  def _reduce_15( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 39
  def _reduce_16( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 40
  def _reduce_17( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 44
  def _reduce_18( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 45
  def _reduce_19( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 46
  def _reduce_20( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 47
  def _reduce_21( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 48
  def _reduce_22( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 49
  def _reduce_23( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 50
  def _reduce_24( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 51
  def _reduce_25( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 52
  def _reduce_26( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 58
  def _reduce_27( val, _values, result )
 result = Unary.new(val[0], val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 59
  def _reduce_28( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 60
  def _reduce_29( val, _values, result )
 result = Binary.new(val[1], val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 61
  def _reduce_30( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 67
  def _reduce_31( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 68
  def _reduce_32( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 69
  def _reduce_33( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 70
  def _reduce_34( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 74
  def _reduce_35( val, _values, result )
 result = Unary.new(val[0], val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'search_query.racc', 80
  def _reduce_36( val, _values, result )
 result = Unary.new(val[0], val[1])
   result
  end
.,.,

 # reduce 37 omitted

module_eval <<'.,.,', 'search_query.racc', 85
  def _reduce_38( val, _values, result )
 result = Binary.new(val[1], val[0], val[2])
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class SearchQuery


class Lexer
  class StateDef < Struct.new(:tokens)
    def on(re, &block)
      self.tokens << [re, block]
    end
  end
  def self.def_state(name, &block)
    statedef = StateDef.new([])
    statedef.instance_eval(&block)
    tokens = statedef.tokens
    #puts "State: #{name}, tokens: #{tokens.map{|x,y| x}.join(", ")}"
    define_method("scan_#{name}") do
      break [false, "$end"] if @sscan.eos?
      #puts "scan_#{name}"
      r = tokens.each do |regexp, block|
        #puts "Scanning against #{regexp}"
        if match = @sscan.scan(regexp)
          if block
            if (ret = block.call(match))
              #puts "RETURNING #{ret.inspect}" if $DEBUG
              @state = ret.pop if ret[2]
              break ret
            else
              break next_token
            end
          else
            break [match, match]
          end
        end
      end
      r or raise "cannot lex at #{@sscan.rest}"
    end
  end

  def initialize(str)
    @state = :normal
    @sscan = StringScanner.new(str)
  end

  def next_token
    send("scan_#{@state}")
  end

# lexer def
  def_state(:normal) do
    on(/!|~/){|op| [:UN_OP, op]}
    on(/\(|\)/)
    on(/"[^"]+"/){|str| [:STRING_LITERAL, str[1..-2]] }
    on(/&|and\b/){ [:BI_OP, '&'] }
    on(/\||or\b/){ [:BI_OP, '|'] }
    %w[set tag user group type author size date length width height pages words bitrate rating].each do |qualifier|
      on(/#{qualifier}\b/){ [qualifier.upcase.to_sym, qualifier] }
    end
    on(/:/)
    on(/<|>|<=|>=|=|==/){|op| [:RANGE_OP, op] }
    on(/[^ \t|&~()]+/){|str| [:WORD, str.chomp]}
    on(/\s+/){ nil } # ignore
  end
end


if __FILE__ == $0
  require 'pp'
  parser = SearchQuery.new
  print "Enter expression (^D or q to quit): "
  until (line = gets.to_s.strip).empty? || line == "q"
    ast = parser.parse(line)
    pp ast
    print "Enter expression (^D or q to quit): "
  end
end
