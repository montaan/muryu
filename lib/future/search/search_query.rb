#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "query_grammar.racc".
#

require 'racc/parser'


class QueryStringParser < Racc::Parser

module_eval <<'..end query_grammar.racc modeval..id53fad62548', 'query_grammar.racc', 132

Negation = Struct.new(:child)
Unary = Struct.new(:op, :child)
BinaryAnd = Struct.new(:left, :right)
BinaryOr = Struct.new(:left, :right)
KeyValExpr = Struct.new(:key, :values)
RangeKeyValExpr = Struct.new(:key, :values)
SortExpr = Struct.new(:key, :direction)

require 'strscan'
def parse(str)
  @yydebug = true if $DEBUG
  @lexer = Lexer.new(str)
  do_parse
end

def next_token
  @lexer.next_token
end

..end query_grammar.racc modeval..id53fad62548

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 41, :_reduce_1,
 2, 42, :_reduce_2,
 3, 42, :_reduce_3,
 1, 42, :_reduce_4,
 1, 42, :_reduce_5,
 3, 42, :_reduce_6,
 3, 42, :_reduce_7,
 1, 42, :_reduce_8,
 1, 42, :_reduce_9,
 2, 42, :_reduce_10,
 1, 45, :_reduce_none,
 1, 45, :_reduce_12,
 3, 43, :_reduce_13,
 3, 43, :_reduce_14,
 3, 44, :_reduce_15,
 1, 46, :_reduce_16,
 1, 46, :_reduce_17,
 1, 46, :_reduce_18,
 1, 46, :_reduce_19,
 1, 46, :_reduce_20,
 1, 46, :_reduce_21,
 1, 46, :_reduce_22,
 1, 46, :_reduce_23,
 1, 46, :_reduce_24,
 1, 46, :_reduce_25,
 1, 48, :_reduce_26,
 1, 48, :_reduce_27,
 1, 48, :_reduce_28,
 1, 48, :_reduce_29,
 1, 48, :_reduce_30,
 1, 48, :_reduce_31,
 1, 48, :_reduce_32,
 1, 48, :_reduce_33,
 1, 48, :_reduce_34,
 2, 47, :_reduce_35,
 3, 47, :_reduce_36,
 3, 47, :_reduce_37,
 3, 47, :_reduce_38,
 1, 47, :_reduce_39,
 3, 50, :_reduce_40,
 2, 50, :_reduce_41,
 1, 50, :_reduce_42,
 1, 51, :_reduce_43,
 1, 51, :_reduce_44,
 1, 51, :_reduce_45,
 1, 51, :_reduce_46,
 1, 51, :_reduce_47,
 1, 51, :_reduce_48,
 1, 51, :_reduce_49,
 1, 51, :_reduce_50,
 1, 51, :_reduce_51,
 1, 51, :_reduce_52,
 1, 51, :_reduce_53,
 1, 51, :_reduce_54,
 1, 51, :_reduce_55,
 1, 52, :_reduce_56,
 1, 52, :_reduce_57,
 1, 49, :_reduce_58,
 3, 49, :_reduce_59,
 1, 49, :_reduce_60,
 1, 49, :_reduce_61,
 2, 53, :_reduce_62,
 2, 54, :_reduce_63,
 1, 54, :_reduce_none,
 0, 56, :_reduce_65,
 7, 55, :_reduce_66 ]

racc_reduce_n = 67

racc_shift_n = 96

racc_action_table = [
    42,    42,    79,    80,    44,    44,    68,    68,    42,    42,
    75,    76,    44,    44,    68,    68,    36,    83,    83,    94,
    42,    42,    65,    65,    44,    44,    68,    68,     8,    42,
    65,    65,    86,    44,    45,    89,    42,    67,    67,    90,
    44,    83,    65,    65,    33,    67,    67,    75,    76,    83,
     9,    41,    12,    15,    17,    20,    23,    67,    67,     8,
    37,    38,    83,    18,    21,    31,    26,    29,     2,     5,
     6,    10,    11,    14,    16,    19,    22,    25,    28,     1,
     4,     9,    34,    12,    15,    17,    20,    23,     8,    75,
    76,    71,    18,    21,   nil,    26,    29,     2,     5,     6,
    10,    11,    14,    16,    19,    22,    25,    28,     1,     4,
     9,   nil,    12,    15,    17,    20,    23,     8,    37,    38,
   nil,    18,    21,   nil,    26,    29,     2,     5,     6,    10,
    11,    14,    16,    19,    22,    25,    28,     1,     4,     9,
    46,    12,    15,    17,    20,    23,     8,    42,   nil,   nil,
   nil,    44,    45,   nil,    42,   nil,    42,   nil,    44,    45,
    44,    45,   nil,   nil,   nil,   nil,   nil,   nil,     9,    41,
    12,    15,    17,    20,    23,     8,    41,   nil,    41,    18,
    21,   nil,    26,    29,     2,     5,     6,    10,    11,    14,
    16,    19,    22,    25,    28,     1,     4,     9,   nil,    12,
    15,    17,    20,    23,     8,    37,    38,   nil,   -67,   -67,
   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,    44,    45,
   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,    12,    15,
    17,    20,    23,     8,    37,    38,    41,    18,    21,   nil,
    26,    29,     2,     5,     6,    10,    11,    14,    16,    19,
    22,    25,    28,     1,     4,     9,   nil,    12,    15,    17,
    20,    23,     8,   nil,   nil,   nil,    18,    21,   nil,    26,
    29,     2,     5,     6,    10,    11,    14,    16,    19,    22,
    25,    28,     1,     4,     9,   nil,    12,    15,    17,    20,
    23,     8,   nil,   nil,   nil,    18,    21,   nil,    26,    29,
     2,     5,     6,    10,    11,    14,    16,    19,    22,    25,
    28,     1,     4,     9,   nil,    12,    15,    17,    20,    23,
     8,   nil,   nil,   nil,    18,    21,   nil,    26,    29,     2,
     5,     6,    10,    11,    14,    16,    19,    22,    25,    28,
     1,     4,     9,   nil,    12,    15,    17,    20,    23,    47,
   nil,    50,   nil,    54,    55,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    52,   nil,   nil,   nil,    56,    58,    60,    61,
    62,    48,    49,    51,    53,    47,   nil,    50,   nil,    54,
    55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    52,   nil,
   nil,   nil,    56,    58,    60,    61,    62,    48,    49,    51,
    53 ]

racc_action_check = [
    94,    92,    59,    59,    94,    92,    94,    92,    34,    83,
    74,    74,    34,    83,    34,    83,    24,    82,    93,    93,
    65,    67,    94,    92,    65,    67,    65,    67,    72,    41,
    34,    83,    74,    41,    41,    78,    68,    94,    92,    82,
    68,    66,    65,    67,    12,    34,    83,    77,    77,    84,
    72,    41,    72,    72,    72,    72,    72,    65,    67,    27,
    27,    27,    91,    27,    27,     7,    27,    27,    27,    27,
    27,    27,    27,    27,    27,    27,    27,    27,    27,    27,
    27,    27,    13,    27,    27,    27,    27,    27,    21,    43,
    43,    36,    21,    21,   nil,    21,    21,    21,    21,    21,
    21,    21,    21,    21,    21,    21,    21,    21,    21,    21,
    21,   nil,    21,    21,    21,    21,    21,    32,    32,    32,
   nil,    32,    32,   nil,    32,    32,    32,    32,    32,    32,
    32,    32,    32,    32,    32,    32,    32,    32,    32,    32,
    32,    32,    32,    32,    32,    32,    73,    45,   nil,   nil,
   nil,    45,    45,   nil,    75,   nil,    31,   nil,    75,    75,
    31,    31,   nil,   nil,   nil,   nil,   nil,   nil,    73,    45,
    73,    73,    73,    73,    73,     9,    75,   nil,    31,     9,
     9,   nil,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,   nil,     9,
     9,     9,     9,     9,    35,    35,    35,   nil,    35,    35,
   nil,   nil,   nil,   nil,    76,   nil,   nil,   nil,    76,    76,
   nil,   nil,   nil,   nil,   nil,   nil,    35,   nil,    35,    35,
    35,    35,    35,    39,    39,    39,    76,    39,    39,   nil,
    39,    39,    39,    39,    39,    39,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    39,   nil,    39,    39,    39,
    39,    39,    37,   nil,   nil,   nil,    37,    37,   nil,    37,
    37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
    37,    37,    37,    37,    37,   nil,    37,    37,    37,    37,
    37,    38,   nil,   nil,   nil,    38,    38,   nil,    38,    38,
    38,    38,    38,    38,    38,    38,    38,    38,    38,    38,
    38,    38,    38,    38,   nil,    38,    38,    38,    38,    38,
     0,   nil,   nil,   nil,     0,     0,   nil,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   nil,     0,     0,     0,     0,     0,    52,
   nil,    52,   nil,    52,    52,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    52,   nil,   nil,   nil,    52,    52,    52,    52,
    52,    52,    52,    52,    52,    33,   nil,    33,   nil,    33,
    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,
   nil,   nil,    33,    33,    33,    33,    33,    33,    33,    33,
    33 ]

racc_action_pointer = [
   318,   nil,   nil,   nil,   nil,   nil,   nil,    60,   nil,   173,
   nil,   nil,    39,    77,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    86,   nil,   nil,    16,   nil,   nil,    57,   nil,   nil,
   nil,   154,   115,   364,     6,   202,    91,   260,   289,   231,
   nil,    27,   nil,    86,   nil,   145,   nil,   nil,   nil,   nil,
   nil,   nil,   338,   nil,   nil,   nil,   nil,   nil,   nil,   -35,
   nil,   nil,   nil,   nil,   nil,    18,    38,    19,    34,   nil,
   nil,   nil,    26,   144,     7,   152,   212,    44,    10,   nil,
   nil,   nil,    14,     7,    46,   nil,   nil,   nil,   nil,   nil,
   nil,    59,    -1,    15,    -2,   nil ]

racc_action_default = [
   -67,   -33,   -19,    -5,   -34,   -20,   -21,   -67,    -8,   -67,
   -22,   -26,   -67,   -67,   -27,   -17,   -28,   -23,    -9,   -29,
   -24,   -67,   -30,   -25,   -67,   -31,   -16,    -1,   -32,   -18,
    -4,   -67,   -67,   -67,   -67,    -2,   -67,   -67,   -67,   -10,
   -39,   -67,   -11,   -13,   -12,   -67,    -3,   -51,   -45,   -46,
   -52,   -48,   -67,   -49,   -50,   -47,   -55,   -15,   -53,   -42,
   -54,   -43,   -44,   -61,   -64,   -67,   -14,   -67,   -67,   -58,
   -60,    96,    -6,    -7,   -67,   -67,   -67,   -35,   -67,   -56,
   -57,   -41,   -67,   -67,   -62,   -63,   -36,   -37,   -38,   -40,
   -59,   -65,   -67,   -67,   -67,   -66 ]

racc_goto_table = [
    66,    43,    57,    40,    24,    27,    81,    92,   nil,   nil,
   nil,    74,   nil,    40,    32,    77,   nil,    40,   nil,   nil,
   nil,    78,   nil,   nil,   nil,   nil,    35,   nil,   nil,   nil,
   nil,    82,   nil,    84,   nil,   nil,   nil,   nil,   nil,   nil,
    85,   nil,    72,    73,   nil,    87,    88,    40,    40,    91,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    93,   nil,
    95 ]

racc_goto_check = [
     9,     7,    10,     5,     1,     2,    12,    16,   nil,   nil,
   nil,     7,   nil,     5,     2,     7,   nil,     5,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,
   nil,     9,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,
     5,   nil,     2,     2,   nil,     7,     7,     5,     5,     9,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,
     9 ]

racc_goto_pointer = [
   nil,     4,     5,   nil,   nil,   -28,   nil,   -30,   nil,   -34,
   -31,   nil,   -53,   nil,   nil,   nil,   -84 ]

racc_goto_default = [
   nil,   nil,    39,    30,     3,    64,     7,   nil,    13,   nil,
   nil,    59,   nil,    69,    70,    63,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :STRING_LITERAL => 2,
 :BI_AND => 3,
 :BI_OR => 4,
 :SEPARATOR => 5,
 :WORD => 6,
 :NOT_OP => 7,
 :RANGE_OP => 8,
 :SET => 9,
 :TAG => 10,
 :USER => 11,
 :GROUP => 12,
 :TYPE => 13,
 :AUTHOR => 14,
 :SIZE => 15,
 :DATE => 16,
 :LENGTH => 17,
 :WIDTH => 18,
 :HEIGHT => 19,
 :PAGES => 20,
 :WORDS => 21,
 :BITRATE => 22,
 :RATING => 23,
 "(" => 24,
 ")" => 25,
 :SORT => 26,
 :DELETED => 27,
 :NAME => 28,
 :SOURCE => 29,
 :REFERRER => 30,
 :NEW => 31,
 :MODIFIED => 32,
 :CREATED => 33,
 :OLD => 34,
 :BIG => 35,
 :SMALL => 36,
 :DESC => 37,
 :ASC => 38,
 :UN_OP => 39 }

racc_use_result_var = true

racc_nt_base = 40

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'STRING_LITERAL',
'BI_AND',
'BI_OR',
'SEPARATOR',
'WORD',
'NOT_OP',
'RANGE_OP',
'SET',
'TAG',
'USER',
'GROUP',
'TYPE',
'AUTHOR',
'SIZE',
'DATE',
'LENGTH',
'WIDTH',
'HEIGHT',
'PAGES',
'WORDS',
'BITRATE',
'RATING',
'"("',
'")"',
'SORT',
'DELETED',
'NAME',
'SOURCE',
'REFERRER',
'NEW',
'MODIFIED',
'CREATED',
'OLD',
'BIG',
'SMALL',
'DESC',
'ASC',
'UN_OP',
'$start',
'start',
'query',
'keyval_expression',
'sort_expression',
'string',
'discrete_key',
'discrete_values',
'range_key',
'range_values',
'sort_values',
'sort_key',
'sort_order',
'range_unary_expr',
'range_basic_expr',
'range_expr',
'@1']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'query_grammar.racc', 15
  def _reduce_1( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 19
  def _reduce_2( val, _values, result )
 result = Negation.new(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 20
  def _reduce_3( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 21
  def _reduce_4( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 22
  def _reduce_5( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 23
  def _reduce_6( val, _values, result )
 result = BinaryAnd.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 24
  def _reduce_7( val, _values, result )
 result = BinaryOr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 25
  def _reduce_8( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 26
  def _reduce_9( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 27
  def _reduce_10( val, _values, result )
 result = BinaryAnd.new(val[0], val[1])
   result
  end
.,.,

 # reduce 11 omitted

module_eval <<'.,.,', 'query_grammar.racc', 31
  def _reduce_12( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 35
  def _reduce_13( val, _values, result )
 result = KeyValExpr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 36
  def _reduce_14( val, _values, result )
 result = RangeKeyValExpr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 40
  def _reduce_15( val, _values, result )
 result = val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 44
  def _reduce_16( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 45
  def _reduce_17( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 46
  def _reduce_18( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 47
  def _reduce_19( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 48
  def _reduce_20( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 49
  def _reduce_21( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 50
  def _reduce_22( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 51
  def _reduce_23( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 52
  def _reduce_24( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 53
  def _reduce_25( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 57
  def _reduce_26( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 58
  def _reduce_27( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 59
  def _reduce_28( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 60
  def _reduce_29( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 61
  def _reduce_30( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 62
  def _reduce_31( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 63
  def _reduce_32( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 64
  def _reduce_33( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 65
  def _reduce_34( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 71
  def _reduce_35( val, _values, result )
 result = Negation.new(val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 72
  def _reduce_36( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 73
  def _reduce_37( val, _values, result )
 result = BinaryAnd.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 74
  def _reduce_38( val, _values, result )
 result = BinaryOr.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 75
  def _reduce_39( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 79
  def _reduce_40( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 80
  def _reduce_41( val, _values, result )
 result = SortExpr.new(val[0], val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 81
  def _reduce_42( val, _values, result )
 result = SortExpr.new(val[0], 'asc')
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 85
  def _reduce_43( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 86
  def _reduce_44( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 87
  def _reduce_45( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 88
  def _reduce_46( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 89
  def _reduce_47( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 90
  def _reduce_48( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 91
  def _reduce_49( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 92
  def _reduce_50( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 93
  def _reduce_51( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 94
  def _reduce_52( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 95
  def _reduce_53( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 96
  def _reduce_54( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 97
  def _reduce_55( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 101
  def _reduce_56( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 102
  def _reduce_57( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 108
  def _reduce_58( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 109
  def _reduce_59( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 110
  def _reduce_60( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 111
  def _reduce_61( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 115
  def _reduce_62( val, _values, result )
 result = Unary.new(val[0], val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 121
  def _reduce_63( val, _values, result )
 result = Unary.new(val[0], val[1])
   result
  end
.,.,

 # reduce 64 omitted

module_eval <<'.,.,', 'query_grammar.racc', 126
  def _reduce_65( val, _values, result )
 result = BinaryAnd.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'query_grammar.racc', 127
  def _reduce_66( val, _values, result )
 result = BinaryOr.new(val[0], val[2])
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class QueryStringParser


class Lexer
  class StateDef < Struct.new(:tokens)
    def on(re, &block)
      self.tokens << [re, block]
    end
  end
  def self.def_state(name, &block)
    statedef = StateDef.new([])
    statedef.instance_eval(&block)
    tokens = statedef.tokens
    #puts "State: #{name}, tokens: #{tokens.map{|x,y| x}.join(", ")}"
    define_method("scan_#{name}") do
      break [false, "$end"] if @sscan.eos?
      #puts "scan_#{name}"
      r = tokens.each do |regexp, block|
        #puts "Scanning against #{regexp}"
        if match = @sscan.scan(regexp)
          if block
            if (ret = block.call(match))
              #puts "RETURNING #{ret.inspect}" if $DEBUG
              @state = ret.pop if ret[2]
              break ret
            else
              break next_token
            end
          else
            break [match, match]
          end
        end
      end
      r or raise "cannot lex at #{@sscan.rest}"
    end
  end

  def initialize(str)
    @state = :normal
    @sscan = StringScanner.new(str)
  end

  def next_token
    send("scan_#{@state}")
  end

# lexer def
  def_state(:normal) do
    on(/\s+/){ nil } # ignore
    on(/!|~/){|op| [:NOT_OP, op]}
    on(/(\(|\))/)
    on(/"[^"]+"/){|str| [:STRING_LITERAL, str[1..-2]] }
    on(/:/) { [:SEPARATOR, ':'] }
    on(/&|and\b/){ [:BI_AND, '&'] }
    on(/\||or\b/){ [:BI_OR, '|'] }
    %w[set deleted tag user group type author sort new modified created old big small source referrer asc desc name  size date length width height pages words bitrate rating].each do |qualifier|
      on(/#{qualifier}\b/i){ [qualifier.upcase.to_sym, qualifier] }
    end
    on(/(<|>|<=|>=|=|==)/){|op| [:RANGE_OP, op] }
    on(/[^ \t|&~()]+/){|str| [:WORD, str.strip]}
  end
end


if __FILE__ == $0
  require 'pp'
  parser = QueryStringParser.new
  print "Enter expression (^D or q to quit): "
  until (line = gets.to_s.strip).empty? || line == "q"
    ast = parser.parse(line)
    pp ast
    print "Enter expression (^D or q to quit): "
  end
end
