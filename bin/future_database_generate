#!/usr/bin/ruby
require 'postgres'

Tables = {}
Joins = []
Indexes = []
Constraints = []

database_descriptions = Dir["database/*.rb"]
database_descriptions.each{|dd| load dd }

Joins.each do |from, to|
  Tables["join_#{from}_#{to}"] = {
    "#{from}_id" => [[from, :id]],
    "#{to}_id" => [[to, :id]]
  }
end

Tables.each do |table,columns|
  columns.each do |colname, sig|
    type = sig[0]
    constraints = sig[1..-1]
    index = sig.delete('index')
    if type.is_a? Array # foreign key
      Constraints << [table, :foreign_key, colname, type]
    end
    if index and not constraints.include? 'unique'
      Indexes << [table, colname]
    end
  end
  columns[:id] = [:serial, 'primary key']
end

tables = Tables.map do |table, columns|
  table_sql = "CREATE TABLE #{PGconn.escape table.to_s} (\n  "
  columns_sql = []
  columns.each do |colname, sig|
    type = sig[0]
    constraints = sig[1..-1]
    while type.is_a? Array # foreign key, collapse type
      type = Tables[type[0]][type[1]][0]
      type = :int if type.to_s == 'serial'
    end
    columns_sql << "#{PGconn.escape colname.to_s} #{type} #{constraints.join(" ")}"
  end
  table_sql << columns_sql.join(",\n  ")
  table_sql << "\n);"
  table_sql
end

constraints = Constraints.map do |table, *args|
  case args[0]
  when :foreign_key
    "ALTER TABLE #{PGconn.escape table.to_s} ADD CONSTRAINT #{PGconn.escape "#{table}_fkey_#{args[1..-1].join("_")}"}\n" +
    " FOREIGN KEY (#{PGconn.escape args[1].to_s})"+
    " REFERENCES #{PGconn.escape args[2][0].to_s}(#{PGconn.escape args[2][1].to_s});"
  when :unique
    "CREATE UNIQUE INDEX #{PGconn.escape "#{table}_unique_#{args[1].join("_")}"}\n" +
    "  ON #{PGconn.escape table.to_s}(#{args[1].map{|a| PGconn.escape a.to_s}.join(",") });"
  when String
    args[0]
  end
end

indexes = Indexes.map do |table, *cols|
  "CREATE INDEX #{PGconn.escape "#{table}_#{cols.join("_")}"} ON " +
  "#{PGconn.escape table.to_s}(#{cols.map{|c| PGconn.escape c.to_s}.join(",")});"
end

puts tables.join("\n\n")
puts
puts constraints.join("\n")
puts
puts indexes.join("\n")