#!/usr/bin/env ruby
Thread.abort_on_exception = true

def load_and_update(fn)
  mtime = File.mtime(fn)
  load fn
  STDERR.puts "Loaded #{fn}"
  Thread.new do
    loop do
      new_mtime = File.mtime(fn)
      if new_mtime != mtime
        begin
          load fn
          STDERR.puts "Reloaded #{fn}"
          mtime = new_mtime
        rescue Exception => e
          STDERR.puts "Error reloading #{fn}: #{e.class}: #{e.message}", e.backtrace
        end
      end
      sleep 1
    end
  end
end

rfn = 'future/web/servlets.rb'
pn = $LOAD_PATH.find{|l| File.exist?(File.join(l, rfn)) }
fn = File.join(pn, rfn)
load_and_update fn

class RootServlet < WEBrick::HTTPServlet::AbstractServlet
  
  def do_GET(req,res)
    res.body = root_page
  end

  def do_POST(req,res)
    res.body = root_page
  end

  def pages
    %w(items users sets groups)
  end

  def root_page
    Builder::XmlMarkup.new.html do |b|
      b.head { b.title("future") }
      b.body {
        b.h1 {
          b.text!("future")
        }
        pages.each do |page|
          b.h2 {
            b.a(page, :href=> page)
          }
        end
      }
    end
  end
  
end

include WEBrick
include Future

s = HTTPServer.new( :Port => 2000 )

s.mount("/", RootServlet)

s.mount("/files", Files)
s.mount("/items", Items)
s.mount("/users", Users)
s.mount("/sets", Sets)
s.mount("/groups", Groups)


trap("INT"){ s.shutdown }
s.start
