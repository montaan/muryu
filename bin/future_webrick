#!/usr/bin/env ruby
Thread.abort_on_exception = true

def load_and_update(fn)
  mtime = File.mtime(fn)
  load fn
  STDERR.puts "Loaded #{fn}"
  Thread.new do
    loop do
      new_mtime = File.mtime(fn)
      if new_mtime != mtime
        begin
          load fn
          STDERR.puts "Reloaded #{fn}"
          mtime = new_mtime
        rescue Exception => e
          STDERR.puts "Error reloading #{fn}: #{e.class}: #{e.message}", e.backtrace
        end
      end
      sleep 1
    end
  end
end

rfn = 'future/web/servlets.rb'
pn = $LOAD_PATH.find{|l| File.exist?(File.join(l, rfn)) }
fn = File.join(pn, rfn)
load_and_update fn

class RootServlet < WEBrick::HTTPServlet::AbstractServlet
  
  def self.servlets
    servlets = []
    ObjectSpace.each_object(Class){|c|
      servlets << c if c.eigenclass.ancestors.include?(Future::FutureServlet)
    }
    servlets.sort_by{|s| s.to_s }
  end

  def mount_servlets
    self.class.servlets.each{|c|
      @server.mount("/" + underscorize(c), c)
    }
  end

  def do_GET(req,res)
    res.body = root_page
  end

  def do_POST(req,res)
    res.body = root_page
  end

  def underscorize(klass)
    klass.to_s.split("::").last.gsub(/[A-Z]/){|m| "_#{m.downcase}"}[1..-1]
  end

  def pages
    self.class.servlets.map{|c| underscorize(c) } + ["zogen"]
  end

  def root_page
    mount_servlets
    Builder::XmlMarkup.new.html do |b|
      b.head { b.title("future") }
      b.body {
        b.h1 {
          b.text!("future")
        }
        b.ul{
          pages.each do |page|
            b.li { b.a(page, :href=> page + "/") }
          end
        }
      }
    end
  end
  
end

include WEBrick
include Future

s = HTTPServer.new( :Port => 2000 )

RootServlet.new(s).mount_servlets
s.mount("/", WEBrick::HTTPServlet::FileHandler, "./html")

trap("INT"){ s.shutdown }
s.start
