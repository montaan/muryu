#!/usr/bin/ruby

$USE_DIPUS_IMAGE_CACHE = true
$PRINT_QUERY_PROFILE = false
$NO_TILE_DRAWING = false
$DB_USE_POOL = false
$MEMCACHE_USE_POOL = false

count = ARGV[0].to_i

pids = (0...count).map do
  fork do
    require 'future/imaging'
    require 'dipus'

    socket = DIPUS.create_service("tile_drawer", "/tile_args/to/tile")

    while conn = socket.accept
      begin
        Thread.current.telapsed
        args = Marshal.load(conn.read)
        puts "#{Thread.current.telapsed} for reading tile request" if $PRINT_QUERY_PROFILE
        data = Future::Tiles.read(*args)
        puts "#{Thread.current.telapsed} for JPEG compression" if $PRINT_QUERY_PROFILE
        conn.write(data)
        puts "#{Thread.current.telapsed} for writing tile JPEG" if $PRINT_QUERY_PROFILE
        puts if $PRINT_QUERY_PROFILE
      rescue Exception => e
        puts "ERROR: #{e.class}: #{e.message}"
        puts
        log_error("#{e.class}: #{e.message}\n#{e.backtrace.join("\n")}")
      ensure
        conn.close
      end
#      objs = Hash.new{|h,k|h[k] = 0}
#      ObjectSpace.each_object{|o| objs[o.class] += 1 }
#      pp objs
    end
    
    exit!(0)
  end
end


pids.each{|pid| Process.wait(pid) }
