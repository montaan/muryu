#!/usr/bin/ruby

require 'erb'
require 'optparse'
require 'open-uri'

options = {
  :http_port => 80,
  :https_port => 443,
  :tile_subdomains => nil,
  :cert_file => File.join(ENV['PWD'], 'etc', 'muryu_cert.pem'),
  :key_file => File.join(ENV['PWD'], 'etc', 'muryu_key.pem')
}
opts = OptionParser.new do |opts|
  opts.banner = "future_setup [options] [hostname]"

  opts.separator ""
  opts.on("--http-port PORT", "HTTP port to use"){|p| options[:http_port] = p.to_i}
  opts.on("--https-port PORT", "HTTPS port to use"){|p| options[:https_port] = p.to_i}
  opts.on("--tile-subdomains S1,S2,...", "Tile server subdomains"){|p| options[:tile_subdomains] = p.strip.split(",").map{|s|s.strip} }
  opts.on("--cert-file FILE", "CA certificate filename"){|p| options[:cert_file] = p}
  opts.on("--key-file FILE", "CA private key filename"){|p| options[:key_file] = p}
end

opts.parse!(ARGV)
if ARGV.empty?
  host = open("http://169.254.169.254/latest/meta-data/public-ipv4"){|f| f.read} rescue nil
  unless host
    puts <<-EOF
You didn't specify a hostname, and I'm not running on an EC2 node so I cannot
determine it.
    EOF
    exit(1)
  end
else
  host = ARGV[0]
end

$cert_file = File.expand_path(options[:cert_file])
$key_file = File.expand_path(options[:key_file])
unless File.exist?($cert_file) 
  system( *(%w(openssl req -x509 -new -days 3650 -out) + [ $cert_file ] + %w(-keyout) + [ $key_file ]) )
end

nginx_template = ERB.new(File.read("etc/nginx.conf.erb"))
config_template = ERB.new(File.read("config.rb.erb"))

def empty_binding; binding end

$host = host
$http_port = options[:http_port]
$https_port = options[:https_port]

# first generate, then write, so nothing changes if the template bombs
config_out = config_template.result(empty_binding)
nginx_out = nginx_template.result(empty_binding)

File.open("config.rb", "w"){|f| f.puts config_out}
File.open("etc/nginx.conf", "w"){|f| f.puts nginx_out}

puts "Running bundle.rb"
load "bundle.rb"
