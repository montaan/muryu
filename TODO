High priority (vital for utility / business):
=============================================

* make a complete UI design and implement it utility-first
  - who uses future for what
  - what new things can you do with future that you couldn't do with existing
    software or would be very inconvenient with existing software

* Write search query parser (sets:!work sets:todo tags:bank user:carol)
  - half-way there

* port upload semantics from upload.cgi
* make upload form
* port future.xpi

* view user items, groups, etc.

* replace crystal icons (globe emblem, mimetypes) with own versions (but in case
  they're free to use, this becomes low priority)

* listing related items for an item
* listing related buyables and auctions for an item
  (amazon, allposters, art.com, ebay)

* give different tile info based on request
  (faster to do indexes-to-items-matching server-side)

* have a way to link to a specific item and its browsing context!
  - otherwise no deep in-links => no deep traffic => fail at the interweb!
  - or in-links lacking vital information (comparison: article with
    per-paragraph links, but the paragraph link would show only that paragraph:
    useless) zogen items are less stand-alone than e.g. blog posts, so the
    browsing context is vital.

* support for text-only browsers (and, more importantly, webcrawlers)
  - accessibility for the blind => accessibility for search engine webcrawlers
    => deep in-links => deep traffic => success! (and bigger userbase)
  - more bandwidth-friendly for people from places with bad connectivity
  - the visual version is quite friendly for bad eyesight due to zoomability

* zogen
  * make tile_info fetches use less requests and queries
  * figure out a way to keep current map coordinates when navigating
    away from page (in essence making back button work)
    - one way would be suture-style navigation-creates-history-state
      but that spams the history full of crap
  * show text items as text
    (get text from tile_info(close zoom) / items(detail floater))


Medium priority (improves use experience / codebase):
=====================================================

* grab sidebar from augen
* get nice filenames from tile_info
* floater views (zoomed in map portion, overview map portion)
* nested portal system for doing titled views (instead of drawing on server)
  - subportal engulfs all items inside it, crop to window/container border
    -> zoom changes subportal size
  - subportal info gotten from tileinfo
    - already getting title
  - subportals behave like windows

* IE compatibility
* Safari / Konqueror compatibility
* Opera compatibility

* Color items by type / source / set / author / poster / other metadata

* Tests for dbconn #parse_query
* Move to using the C layouter, rewrite TileDrawer for speed

* extend test/benchmark/tile_rend.rb to do draw speed tests with different
  cache image amounts (create mesh and texture for each image, determine
  overhead, optimize between gfx card bandwidth and CPU use (crop images on CPU
  and throw only the required parts to the card vs. throw the whole cache image
  and crop on the gfx card using geometry))
  - generate realistic cache image set and draw realistic layouts, with focus
    on the slowest simulated cases (see doc/tile_drawing.rb)

* list tags
* list items with a given tag

* view user infos
* list users in a given group

* redirect to wanted page on successful login

* write servlet submodes of [users, groups, tags, sets, etc.] -form

* design and implement undo (argh, important feature but a bit painful)

* emblems for items
* drawing lines between two items

* rearrange items by dragging
  - use arrangement to infer relatedness, close items are related

* Ability to do set arithmetic on search queries, dead-simple UI for it
  - intersection, union, complement, substraction
    - A & B, A | B, ~A
    - A - B = (~A & ~B) & (A | B) = ~(A & B) & (A | B)
  - Claus and Pjotr have listings of their model train cars on future. Both have
    several copies of some cars and a list of wanted cars. Find possible trades.
    - claus.wanted & pjotr.dupes, pjotr.wanted & claus.dupes

* Ability to do side-by-side comparisons for items / sets
  - Paula the photographer wants to find the best photograph from a series
    - first pick the good ones, then do side-by-side comparisons to drop the
      not-best ones, then do side-by-side comparisons between the best to find
      the very best one


Low priority (would be nice / possible):
========================================

* switch to tile-generated-from-item at 256x256 (easier to do server-side)
* special thumbnail handling for multipage docs: big header page with all doc
  pages on the side as tiny, zoom in to read

* Widgets; have a way to add custom snippets of HTML and JS to the page
  - examples
    - GMail+GTalk widget for sending links and items to friends
      with a single click, received links in sidebar
    - imageshack widget for uploading an item to imageshack for embedding in a
      forum post
  - outsource services that we don't want to do
  - promote good ones
  - like firefox extensions

* media player for augen sidebar (i.e. musica.js + flash component for playing)

* shoutcast stream of owner's music files at the wanted bitrate (high br when
  home at broadband, low br when crappy mobile net. bandwidth implications?)

* drag&drop items on a layout, save layout as web page / pdf == simple dtp

* OpenGL-based client program (cmp. google maps - google earth)
